<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-02-14T17:32:47+03:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">ZenHR APIâ€™s Documentaion</title><subtitle></subtitle><entry><title type="html">API Documentation | ZenHR</title><link href="http://localhost:4000/2019/04/29/api-documentation.html" rel="alternate" type="text/html" title="API Documentation | ZenHR" /><published>2019-04-29T00:00:00+03:00</published><updated>2019-04-29T00:00:00+03:00</updated><id>http://localhost:4000/2019/04/29/api-documentation</id><content type="html" xml:base="http://localhost:4000/2019/04/29/api-documentation.html">&lt;div class=&quot;&quot;&gt;
&lt;div class=&quot;col-lg-3 col-md-3 col-xs-12 col-sm-12&quot; id=&quot;overflow&quot;&gt;
&lt;div id=&quot;sidebar&quot;&gt;
&lt;div&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#overview&quot; id=&quot;markdown-toc-overview&quot;&gt;Overview&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#getting-started&quot; id=&quot;markdown-toc-getting-started&quot;&gt;Getting started&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#authentication&quot; id=&quot;markdown-toc-authentication&quot;&gt;Authentication&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#encoding-and-decoding&quot; id=&quot;markdown-toc-encoding-and-decoding&quot;&gt;Encoding and Decoding&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#ruby&quot; id=&quot;markdown-toc-ruby&quot;&gt;Ruby:&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#php&quot; id=&quot;markdown-toc-php&quot;&gt;PHP:&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#python&quot; id=&quot;markdown-toc-python&quot;&gt;PYTHON&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#parameters&quot; id=&quot;markdown-toc-parameters&quot;&gt;Parameters&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#example&quot; id=&quot;markdown-toc-example&quot;&gt;example&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#example-1&quot; id=&quot;markdown-toc-example-1&quot;&gt;example&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#requests-and-respons&quot; id=&quot;markdown-toc-requests-and-respons&quot;&gt;Requests and Respons&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ping&quot; id=&quot;markdown-toc-ping&quot;&gt;Ping&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#branches&quot; id=&quot;markdown-toc-branches&quot;&gt;Branches&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#employees&quot; id=&quot;markdown-toc-employees&quot;&gt;Employees&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#professional-data&quot; id=&quot;markdown-toc-professional-data&quot;&gt;Professional data&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#financial-data&quot; id=&quot;markdown-toc-financial-data&quot;&gt;Financial data&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#financial-transactions&quot; id=&quot;markdown-toc-financial-transactions&quot;&gt;Financial transactions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#salaries&quot; id=&quot;markdown-toc-salaries&quot;&gt;Salaries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;col-lg-9 col-md-9 col-xs-12&quot;&gt;

    &lt;h3 id=&quot;overview&quot;&gt;Overview&lt;/h3&gt;

    &lt;div style=&quot;padding-left: 15px&quot;&gt;
Our API is based on &lt;b&gt;JWT&lt;/b&gt; (JSON Web Token), we use &lt;b&gt;JWT (HS256 - HMAC using SHA-256 hash algorithm)&lt;/b&gt;

In order to start the integration you need to generate &lt;b&gt;secret&lt;/b&gt; and &lt;b&gt;key &lt;/b&gt;tokens.

The &lt;b&gt;Key &lt;/b&gt;will be used to identify your request and the &lt;b&gt;Secret &lt;/b&gt;will be used for encoding and decoding your &lt;b&gt;payload&lt;/b&gt;.

&lt;/div&gt;
    &lt;h3 id=&quot;getting-started&quot;&gt;Getting started&lt;/h3&gt;

    &lt;div style=&quot;padding-left: 15px&quot;&gt;
  First you need to login to&lt;b&gt; ZenHR &lt;/b&gt;to generate your key and secret tokens

  &lt;ol&gt;
    &lt;li&gt;
      &lt;h4&gt;Go to settings&lt;/h4&gt;
      &lt;br /&gt;
      &lt;img src=&quot;/images/0.png&quot; width=&quot;85%&quot; /&gt;
    &lt;/li&gt;
  &lt;br /&gt;
  &lt;br /&gt;
    &lt;li&gt;
      &lt;h4&gt;Select API Keys tab&lt;/h4&gt;
      &lt;br /&gt;
      &lt;img src=&quot;/images/1.png&quot; width=&quot;85%&quot; /&gt;
    &lt;/li&gt;
  &lt;br /&gt;
  &lt;br /&gt;
    &lt;li&gt;
      &lt;h4&gt;Click on (+ Add) button to add new key and secret&lt;/h4&gt;
      &lt;ul style=&quot;width: 80%&quot;&gt;
        &lt;li&gt;
           The Name field is just a label to let you know which API Key is used for which integration
        &lt;/li&gt;
        &lt;li&gt;
           The  Permissions field will be used to identify your allowed actions in your requests to ZenHR
        &lt;/li&gt;
        &lt;li&gt;
           The IP Addresses field is optional, however; we highly recommend adding them, in that case we will not accept any request to your account other than the ones that come form your IP Addresses
        &lt;/li&gt;
      &lt;/ul&gt;
      &lt;br /&gt;
      &lt;p style=&quot;color: red&quot;&gt; Note: The IP Addresses must be splitted by comma in case you wanted to enter more that a single IP Address &lt;/p&gt;
      &lt;img src=&quot;/images/2.png&quot; width=&quot;85%&quot; /&gt;
    &lt;/li&gt;
  &lt;br /&gt;
  &lt;br /&gt;
    &lt;li&gt;
      &lt;h4&gt;After Filling your fields, click on create to generate you API Keys&lt;/h4&gt;
      &lt;br /&gt;
      &lt;img src=&quot;/images/3.png&quot; width=&quot;85%&quot; /&gt;
    &lt;/li&gt;

  &lt;br /&gt;
  &lt;br /&gt;
    &lt;li&gt;
      &lt;h4&gt;Now That you have created you API Key successfully click on Copy Key and Copy Secret to copy them&lt;/h4&gt;
      &lt;br /&gt;
      &lt;img src=&quot;/images/4.png&quot; width=&quot;85%&quot; /&gt;
    &lt;/li&gt;

  &lt;/ol&gt;
&lt;/div&gt;

    &lt;h3 id=&quot;authentication&quot;&gt;Authentication&lt;/h3&gt;

    &lt;p&gt;In every request you make to &lt;b&gt;ZenHR&lt;/b&gt; you need to do add your &lt;b&gt; key &lt;/b&gt; to the header&lt;/p&gt;
    &lt;p style=&quot;color: red;&quot;&gt;
  You should note that you have a limit of 500 request everyday.
&lt;/p&gt;

    &lt;h3 id=&quot;encoding-and-decoding&quot;&gt;Encoding and Decoding&lt;/h3&gt;

    &lt;h4 id=&quot;ruby&quot;&gt;Ruby:&lt;/h4&gt;
    &lt;p&gt;Install JWT Gem&lt;/p&gt;
    &lt;pre&gt;
sudo gem install jwt
&lt;/pre&gt;

    &lt;pre&gt;
hmac_secret = 'YOUR SECRET'

token = JWT.encode payload, hmac_secret, 'HS256'

puts token
# eyJhbGciOiJIUzI1NiJ9.eyJkYXRhIjoidGVzdCJ9.pNIWIL34Jo13LViZAJACzK6Yf0qnvT_BuwOxiMCPE-Y

decoded_token = JWT.decode token, hmac_secret, true, { algorithm: 'HS256' }

puts decoded_token
# Array
# [
#   {&quot;data&quot;=&amp;gt;&quot;test&quot;}, # payload
#   {&quot;alg&quot;=&amp;gt;&quot;HS256&quot;} # header
# ]
&lt;/pre&gt;

    &lt;h4 id=&quot;php&quot;&gt;PHP:&lt;/h4&gt;
    &lt;p&gt;install JWT using Composer&lt;/p&gt;
    &lt;pre&gt;
  composer require mishal/jwt
&lt;/pre&gt;

    &lt;pre&gt;

&amp;lt;?php
/*
 * This file is part of Jwt for Php.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

require_once __DIR__ . '/../vendor/autoload.php';

use Jwt\Jwt;
use Jwt\Algorithm\HS256Algorithm;

$token = Jwt::encode('string', $alg = new HS256Algorithm('secret'));

echo $token; // eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJkYXRhIjoic3RyaW5nIn0.RncJbCyf4zd0pu1N02u_rKwEezkmd94r3i5sWLk1ceU

// decode, you must passed allowed algorithm(s) to prevent attackers to control the choice of algorithm
$decoded = Jwt::decode($token, ['algorithm' =&amp;gt; $alg]);

echo $decoded['data']; // 'string'
&lt;/pre&gt;

    &lt;h4 id=&quot;python&quot;&gt;PYTHON&lt;/h4&gt;

    &lt;pre&gt;

import chilkat

#  Demonstrates how to create an HMAC JWT using a shared secret (password).

#  This example requires the Chilkat API to have been previously unlocked.
#  See Global Unlock Sample for sample code.

jwt = chilkat.CkJwt()

#  Build the JOSE header
jose = chilkat.CkJsonObject()

success = jose.AppendString(&quot;alg&quot;,&quot;HS256&quot;)
success = jose.AppendString(&quot;typ&quot;,&quot;JWT&quot;)

#  Now build the JWT claims (also known as the payload)
claims = chilkat.CkJsonObject()
success = claims.AppendString(&quot;iss&quot;,&quot;http://example.org&quot;)
success = claims.AppendString(&quot;sub&quot;,&quot;John&quot;)
success = claims.AppendString(&quot;aud&quot;,&quot;http://example.com&quot;)

#  Set the timestamp of when the JWT was created to now.
curDateTime = jwt.GenNumericDate(0)
success = claims.AddIntAt(-1,&quot;iat&quot;,curDateTime)

#  Set the &quot;not process before&quot; timestamp to now.
success = claims.AddIntAt(-1,&quot;nbf&quot;,curDateTime)

#  Set the timestamp defining an expiration time (end time) for the token
#  to be now + 1 hour (3600 seconds)
success = claims.AddIntAt(-1,&quot;exp&quot;,curDateTime + 3600)

#  Produce the smallest possible JWT:
jwt.put_AutoCompact(True)

strJwt = jwt.createJwt(jose.emit(),claims.emit(),&quot;secret&quot;)

print(strJwt)
&lt;/pre&gt;

    &lt;h3 id=&quot;parameters&quot;&gt;Parameters&lt;/h3&gt;

    &lt;p&gt;By default we paginate data before responding to your request, the default is 10 records per page, you may change that by passing &lt;b&gt;per_page&lt;/b&gt; param in the URL&lt;/p&gt;

    &lt;h4 id=&quot;example&quot;&gt;example&lt;/h4&gt;
    &lt;pre&gt; https://www.zenhr.com/integration/v1/employees?per_page=15 &lt;/pre&gt;

    &lt;p&gt;since we are paginating the data, you need to specify which page you want to request using &lt;b&gt; page &lt;/b&gt; param, if you did not pass this param we will respond with the first page&lt;/p&gt;

    &lt;h4 id=&quot;example-1&quot;&gt;example&lt;/h4&gt;
    &lt;pre&gt; https://www.zenhr.com/integration/v1/employees?per_page=15&amp;amp;page=2 &lt;/pre&gt;

    &lt;h3 id=&quot;requests-and-respons&quot;&gt;Requests and Respons&lt;/h3&gt;

    &lt;p&gt;Every respons will be encoded, after decoding it you will have the following JSON object&lt;/p&gt;
    &lt;pre&gt; {&quot;current_page&quot; =&amp;gt; NUMBER, &quot;per_page&quot; =&amp;gt; NUMBER, &quot;total_number_of_records&quot; =&amp;gt; NUMBER, &quot;total_pages&quot; =&amp;gt; NUMBER, &quot;data&quot; =&amp;gt; JSON OBJECT} &lt;/pre&gt;

    &lt;table class=&quot;table table-condensed&quot; style=&quot;width: 70%&quot;&gt;
    &lt;thead&gt;
      &lt;tr&gt;
        &lt;th scope=&quot;col&quot;&gt;
          Key
        &lt;/th&gt;
        &lt;th scope=&quot;col&quot;&gt;
          Description
        &lt;/th&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td&gt;
          current_page
        &lt;/td&gt;
        &lt;td&gt;
          the page you are on, same as &lt;b&gt; page &lt;/b&gt; parameter
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;
          per_page
        &lt;/td&gt;
        &lt;td&gt;
          the same as &lt;b&gt; per_page &lt;/b&gt; parameter
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;
          total_number_of_records
        &lt;/td&gt;
        &lt;td&gt;
          the total number of all records, &lt;b&gt; not the number of the records in current page&lt;/b&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;
          total_pages
        &lt;/td&gt;
        &lt;td&gt;
          total number of pages
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;
          data
        &lt;/td&gt;
        &lt;td&gt;
          JSON object with the requested data
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;

    &lt;p style=&quot;color: red&quot;&gt;
    However not all responses will have this structure of respnose, for example when you request a specific record it will only return the data without the other params
  &lt;/p&gt;

    &lt;p&gt;In order to fetch data use &lt;b&gt;GET&lt;/b&gt; method&lt;/p&gt;

    &lt;h3 style=&quot;color: red;&quot;&gt;
  Please note that the encoded payload which comes from us will be valid for only a 1 minute, after the 1 minute the payload will be invalid.
  &lt;/h3&gt;

    &lt;h3 id=&quot;ping&quot;&gt;Ping&lt;/h3&gt;
    &lt;p&gt;use this end point to test your integration.&lt;/p&gt;

    &lt;pre&gt;
curl --header &quot;key: YOUR_KEY&quot; --request GET https://www.zenhr.com/integration/v1/ping
&lt;/pre&gt;

    &lt;p&gt;when you make a successful request, ping will response with a payload which &lt;b&gt;does not has an expiry time&lt;/b&gt;, so that you can test your decode method.&lt;/p&gt;

    &lt;p&gt;you should get the following after decoding the payload successfully&lt;/p&gt;

    &lt;pre&gt;{ data: { ping: 'Pong' } } &lt;/pre&gt;

    &lt;h3 id=&quot;branches&quot;&gt;Branches&lt;/h3&gt;

    &lt;p&gt;In order to fetch all branches data
&lt;br /&gt;&lt;/p&gt;

    &lt;pre&gt;
curl --header &quot;key: YOUR_KEY&quot; --request GET https://www.zenhr.com/integration/v1/branches
&lt;/pre&gt;

    &lt;p&gt;for a single branch
&lt;br /&gt;&lt;/p&gt;

    &lt;pre&gt;
curl --header &quot;key: YOUR_KEY&quot; --request GET https://www.zenhr.com/integration/v1/branches/BRANCH_ID
&lt;/pre&gt;

    &lt;h3 id=&quot;employees&quot;&gt;Employees&lt;/h3&gt;

    &lt;p&gt;In order to fetch all employees data
&lt;br /&gt;&lt;/p&gt;

    &lt;pre&gt;
curl --header &quot;key: YOUR_KEY&quot; --request GET https://www.zenhr.com/integration/v1/employees?branch_id=BRANCH_ID
&lt;/pre&gt;

    &lt;p&gt;for a single employee
&lt;br /&gt;&lt;/p&gt;

    &lt;pre&gt;
curl --header &quot;key: YOUR_KEY&quot; --request GET https://www.zenhr.com/integration/v1/employees/EMPLOYEE_ID?branch_id=EMPLOYEE_BRANCH_ID
&lt;/pre&gt;

    &lt;h3 id=&quot;professional-data&quot;&gt;Professional data&lt;/h3&gt;

    &lt;p&gt;In order to fetch all employees professional data
&lt;br /&gt;&lt;/p&gt;

    &lt;pre&gt;
curl --header &quot;key: YOUR_KEY&quot; --request GET https://www.zenhr.com/integration/v1/professional_data?branch_id=EMPLOYEE_BRANCH_ID
&lt;/pre&gt;

    &lt;p&gt;to get all professional data for a single employee
&lt;br /&gt;&lt;/p&gt;

    &lt;pre&gt;
curl --header &quot;key: YOUR_KEY&quot; --request GET https://www.zenhr.com/integration/v1/employees/YOUR_EMPLOYEE_ID/professional_data?branch_id=EMPLOYEE_BRANCH_ID
&lt;/pre&gt;

    &lt;p&gt;to get the current professional data for a single employee
&lt;br /&gt;&lt;/p&gt;

    &lt;pre&gt;
curl --header &quot;key: YOUR_KEY&quot; --request GET https://www.zenhr.com/integration/v1/employees/YOUR_EMPLOYEE_ID/professional_data/active?branch_id=EMPLOYEE_BRANCH_ID
&lt;/pre&gt;

    &lt;h3 id=&quot;financial-data&quot;&gt;Financial data&lt;/h3&gt;

    &lt;p&gt;In order to fetch all employees financial data
&lt;br /&gt;&lt;/p&gt;

    &lt;pre&gt;
curl --header &quot;key: YOUR_KEY&quot; --request GET https://www.zenhr.com/integration/v1/financial_data?branch_id=EMPLOYEE_BRANCH_ID
&lt;/pre&gt;

    &lt;p&gt;to get all financial data for a single employee
&lt;br /&gt;&lt;/p&gt;

    &lt;pre&gt;
curl --header &quot;key: YOUR_KEY&quot; --request GET https://www.zenhr.com/integration/v1/employees/YOUR_EMPLOYEE_ID/financial_data?branch_id=EMPLOYEE_BRANCH_ID
&lt;/pre&gt;

    &lt;p&gt;to get the active financial data for a single employee
&lt;br /&gt;&lt;/p&gt;

    &lt;pre&gt;
curl --header &quot;key: YOUR_KEY&quot; --request GET https://www.zenhr.com/integration/v1/employees/YOUR_EMPLOYEE_ID/financial_data/active?branch_id=EMPLOYEE_BRANCH_ID
&lt;/pre&gt;

    &lt;h3 id=&quot;financial-transactions&quot;&gt;Financial transactions&lt;/h3&gt;

    &lt;p&gt;In order to fetch all employees financial transactions
&lt;br /&gt;&lt;/p&gt;
    &lt;pre&gt;
curl --header &quot;key: YOUR_KEY&quot; --request GET https://www.zenhr.com/integration/v1/financial_transactions?branch_id=EMPLOYEE_BRANCH_ID
&lt;/pre&gt;

    &lt;p&gt;to get all financial transactions for a single employee
&lt;br /&gt;&lt;/p&gt;
    &lt;pre&gt;
curl --header &quot;key: YOUR_KEY&quot; --request GET https://www.zenhr.com/integration/v1/employees/YOUR_EMPLOYEE_ID/financial_transactions?branch_id=EMPLOYEE_BRANCH_ID
&lt;/pre&gt;

    &lt;h3 id=&quot;salaries&quot;&gt;Salaries&lt;/h3&gt;

    &lt;p&gt;In order to fetch all employees salaries
&lt;br /&gt;&lt;/p&gt;
    &lt;pre&gt;
curl --header &quot;key: YOUR_KEY&quot; --request GET https://www.zenhr.com/integration/v1/salaries?branch_id=EMPLOYEE_BRANCH_ID
&lt;/pre&gt;

    &lt;p&gt;to get all salaries for a single employee
&lt;br /&gt;&lt;/p&gt;
    &lt;pre&gt;
curl --header &quot;key: YOUR_KEY&quot; --request GET https://www.zenhr.com/integration/v1/employees/YOUR_EMPLOYEE_ID/salaries?branch_id=EMPLOYEE_BRANCH_ID
&lt;/pre&gt;
  &lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">ZenHR's open API documentation instructions allow you to effectively integrate your ZenHR account with other third-party systems.</summary></entry></feed>